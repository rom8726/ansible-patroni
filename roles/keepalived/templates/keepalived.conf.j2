#vrrp_instance VI_1 {
#    state MASTER
#    interface {{ vip_interface }}        # Сетевой интерфейс (например, eth0)
#    virtual_router_id 51                 # Идентификатор VRRP (уникальный номер)
#    priority 100                         # Приоритет (для экземпляра на этом отдельном узле)
#    advert_int 1
#
#    authentication {
#        auth_type PASS
#        auth_pass {{ keepalived_auth_pass }}
#    }
#
#    virtual_ipaddress {
#        {{ virtual_ip }}
#    }
#
#    track_script {
#        chk_patroni_or_haproxy
#    }
#}
#
#vrrp_script chk_patroni_or_haproxy {
#    script "/usr/local/bin/check_haproxy.sh"
#    interval 2
#    weight 2
#}

global_defs {
   router_id ocp_vrrp
   enable_script_security
   script_user root
}

vrrp_script chk_patroni_leader {
    script "timeout 3 /opt/keepalived/scripts/chk_patroni_leader.sh"
    interval 5
    fall 1
    rise 1
}

vrrp_script haproxy_check {
   script "/opt/keepalived/scripts/haproxy_check.sh"
   interval 2
   weight 2
}

vrrp_instance pgcluster_1 {
    interface {{ vip_interface }}
    state BACKUP
    priority {{ ansible_default_ipv4.address.split('.').3 }}
    virtual_router_id 10
    authentication {
        auth_type PASS
        auth_pass password
    }
    virtual_ipaddress {
        {{ cluster_vip_1  }}
    }
    unicast_src_ip {{ ansible_host }}
    unicast_peer {
    {% for host in groups['promoters'] %}
      {{ hostvars[host]['ansible_default_ipv4'].address }}
    {% endfor %}
    }
    track_script {
        chk_patroni_leader
    }
}
